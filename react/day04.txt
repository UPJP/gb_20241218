1. react에서 keypros를 사용해야 하는 경우 
 - 배열을 렌더링 할 때: 예를들어, map 함수를 사용하여 배열의 각 요소를 컴포넌트로
   변환하는 경우에는 각 요소에 고유한 key prop를 제공해야 한다.
 - 동적으로 생성된 컴포넌트 리스트 : 컴포넌트가 동적으로 생성되는 경우, 각 컴포넌트에 고유한 
   key prop를 지정하여 React가 컴포넌트의 상태를 올바르게 추적하고 관리할 수 있도록 해야한다.
 - 재사용 가능한 컴포넌트: 재사용 가능한 컴포넌트에서도 key prop를 사용하여 각 인스턴스를 
   고유하게 식별할 수 있도록 한다

2. useReducer 훅
 - 컴포넌트 내부에 새로운 state를 생성하는 훅 
 - 모든 useState는 useReducer로 대체 가능

3. 최적화 
 - 웹 서비스의 성능을 개선하는 모든 행위를 일컫음 
 - 아주 단순한 것부터 아주 어려운 방법까지 매우 다양하다. 

3-1. ReactApp 내부의 최적화 방법 
 - 컴포넌트 내부의 불필요한 연산방지
 - 컴포넌트 내부에 불필요한 함수 재생성 방지
 - 컴포넌트의 불필요한 리렌더링 방지

3-2. useMemo 
 - 메모이제이션 기법을 기반으로 불 필요한 연산을 최적화 하는 리액트 훅 

// param1 : 콜벡함수
// param2 : deps ,deps의 값이 바뀌면 callback 함수를 다시 실행 
                그리고 해당 함수가 반환하는 값을 useMemo는 다시 반환
let a = useMemo(()=>{ return 1; },[]);