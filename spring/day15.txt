1. Q클래스 인스턴스를 사용하는 방법 
 // 별칭 직접 지정
QMember m = new QMember("m")

 // 기본 인스턴스를 사용
QMember m = QMember.member;

2. JPQL이 제공하는 모든 검색 조건 제공
  member.username.eq("member1")
	   // member = 'member1'
  member.usename.ne("member1").not()
	  // member != 'member1'

 member.username.isNotNull()
   // 이름이 not null 인지 판단
 member.age.in(10, 20)
   // age in (10, 20)    = age 가 10~20 사이
 member.age.notin(10, 20)
   // age not in (10, 20)
 member.age.between(10, 30)
   // between 10 and 30
 member.age.goe(30)
	//age > 30
 member.age.lt(30)
	//age< 30

member.username.like("member%")

 - like(str) : 쿼리가 나갈때 str  자체가 완전히 일치
		즉, like는 % 연산을 선택할 수 있다.
 - contains(str) : %str%

3. 결과조회 
 - fetch(): 리스트 조회, 데이터 없으면 빈리스트 반환 
 - fetchOne() : 단견조회
	-> 결과가 없으면 null
	-> 결과가 둘 이상이면 Exception

4. 정렬
 - desc(), asc()
 - nullLast() , nullFirst() : null 데이터 순서 부여


5. Query DSL조인
 - 조인의 기본 문법은 첫 번째 파라미터에 조인 대상을 지정하고,  
   두번째 파라미터에 별칭으로 사용할 Q타입을 지정하면 된다.

 - join() : inner join
 - left join() : left outer join

6. 서브쿼리의 한계 
 - JPA, JPQL 서브쿼리의 한계점으로는 from 절의 서브쿼리는 지원하지 않는다.
   당연히 QueryDSL도 지원하지 않는다.

6-1. 해결방안
 - 서브쿼리를 join으로 변경한다.
 - 애플리케이션에서 쿼리를 2번 분리해서 실행한다.
 - nativeSQL을 사용한다. //생쿼리

7. 프로젝션과 결과 반환
 - 프로젝션 : select 대상
 queryFactory.select(member.username)
		  .from(member)
		  .fetch();
8. QueryDSL 빈 생성 (3가지)
 - 결과를 DTO 반환할 때 사용
 - 프로퍼티 접근
 - 필드 직접 접근
 - 생성자 이용
