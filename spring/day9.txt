1. 데이터 중심 설계의 문제점
 - 현재 방식은 객체 설계를 테이블 설계에 맞춘 방식
 - 테이블의 외래키를 객체에 그대로 가져옴

2. 연관관계 매핑 기초 
 - 객체와 테이블 연관관계 차이를 이해 
 - 객체의 참조와 테이블의 외래 키를 매핑
 - 용어 이해 
	-> 방향 (Direction) : 단방향, 양방향
	-> 다중성(Multiplicity) : 다대일( N : 1), 일대다(1:N), 일대일(1:1), 다대다(N : N) 이해 
	-> 연관관계 주인 (Owner) : 객체 양방향 연관관계는 관리 주인이 필요

3. 예제 
 - 회원과 팀으로 사용 
 - 회원은 하나의 팀에만 소속될 수 있다.
 - 회원과 팀은 다대일 관계다

 - 객체 테이블에 맞추어 데이터 중심으로 모델링하면, 협력 관계를 만들 수 없다.
 - 테이블은 외래 키로 조인을 사용해서 연관된 테이블을 찾는다.
 - 객채는 참조를 사용해서 연관된 객체를 찾는다.
 - 테이블과 객체 사이에는 이런 큰 간격이 있다.

4. 단방향 연관관계
 - 객체지향 모델링

5. 양방향 연관관계와 연관관계의 주인(중요)*
 - 현재는 Member는 Team의 정보를 가졌으나 Team은 Member의 정보를 갖지 못했다.
 - 객체 참조와, 외래키의 가장 큰 차이점
 - 테이블은 FK만 있으면 양쪽에 연관관계를 알 수 있다.

6. 연관관계 주인과 mappedBy(매우중요)*
 - 객체와 테이블이 관계를 맺는 차이 
 	-> 테이블의 입장 = FK, 1개 
	     회원(MEMBER) <-> 팀 (TEAM)의 연관관계 1개 (양방향)
	-> MEMBER 테이블 입장에서 TEAM 테이블 조인 가능
 	-> TEAM 테이블 입장에서 MEMBER 테이블 조인 가능

 - 객체 연관관계 = 2개 
	- 회원(Member) -> 팀(Team) 연관관계 1개(단방향)
	- 팀(Team)	-> 회원(Member) 연관관계 1개(단방향)
	- 사실은 단방향 연관관계가 2개 있는것이다
	- 억지로 양방향이라고 말하는것

 - 객체의 양방향 관계
 - 딜레마가 생긴다	
	-> Member에서 Team으로 가는 team 참고 값과,
	    Team에서 Member로 가는 members 참조 값이 있다
	-> Member에서 Team값이 수정 됐을 때, Member table에 있는 TEAM_ID가 수정되어야 하는지?
	    Team에서 member값을 수정 했을 때, Member에 있는 TEAM_ID가 수정되어야 하는지?

 - DB입장에서 MEMBER에 있는 TEAM_ID만 update가 되면 된다. => 주인이 생긴다.

7. 연관관계의 주인(Owner)
 - 양방향 매칭 규칙
	-> 객체의 두 관계중 하나를 연관관계의 주인으로 지정
	-> 연관관계의 주인만 외래키를 관리(등록,수정)
	-> 주인이 아닌쪽은 읽기만 가능 
 	-> 주인은 mappdBy 속성 사용X (mappdBy : 내가 누군가에 의해서 mapping 이 되어있다는 뜻 )
	-> 주인이 아니면 mappedBy 속성으로 주인을 지정

8. 문제점 
 - insert문만 실행되고 select문은 실행되지 않는다.
 - team이 영속성 컨텍스트 안에 들어가있는데(1차 캐시),
   현재 변경된을 감지하지 못한 상태 (flush가 호출되지 않은 상태)에서 검색을 하니 select가 되지않는 것
 - 즉 1차 캐시에서 조회된 것이 그대로 나오게 된다
 - 객체 지향적으로 생각해봐도 양쪽을 다 넣어준다.

9. 양방향 연관관계 주의사항 
 - 순수 객체 상태를 고려해서 항상 양쪽에 값을 설정하자 
 - 연관관계 편의 메서드를 생성하자 
 - 양방향 매핑시에 무한 루트를 조심하자 
   (예 : toString(), lomboke을 통한 toTring()을 만들지 말 것)

10. 연관관계 편의 메서드를 생성하자
 - 일반적으로 setter의 형태(자바에서의 관례 형태를 벗어나면)가 아니면 메서드 이름을 바꿔준다.
   그럼 추후 소스코드를 봤을 때 단순 setter 작업이 아닌 중요한 작업을 진행하는지를 파악할 수 있다.

11. 양방향 매핑 정리
 - 단방향 매핑만으로도 이미 연관관계 매핑은 완료
 - 양방향 매핑은 반대 방향으로 조회기능이 추가된 것 뿐
 - 양방향 사용 이유 : 역방향으로 탐색할 일이 많음
 - 단방향 매핑을 잘하고 , 양방향은 필요할 때 추가해도 됨(테이블에 영향을 주지 않는다)

12. 연관관계의 주인을 정하는 기준
 - 연관관계는 비지니스 로직을 기준으로 연관관계의 주인을 선택하면 안됨 
 - 연관관계의 주인은 외래 키의 위치를 기준으로 정해야함

