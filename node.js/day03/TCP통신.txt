TCP/IP, UDP를 직접 다루는것은 Low Level 작업으로 인식합니다. 하지만 레거시 시스템에서는 아직도 HTTP가 아닌 TCP/IP나 UDP기반의 Custom프로토콜을 정의하여 구현된 것이 대부분이고 이러한 장비나 시스템과 연동하기 위해서는 여전히 소켓 프로그램에 대한 기본 지식이 있어야 합니다. 기본개념에 대해서는 인터넷상에 좋은 자료들이 많이 있기 떄문에  여기서는 간략하게 설명드리겠습니다.

 

소켓 프로그램에서 가장 기본이 되는것은 소켓을 생성하는 일입니다.  소켓은 네트워크를 통해 두 컴퓨터 간의 통신을 가능하게 하는 논리적인 접점입니다. 유닉스시스템에서는 파일과 같이 소프트웨어가 접근할 수 있는 객체로 생성됩니다. 
Application이 네트워크를 통해 다른 프로그램과 통신하려는 경우 소켓을 생성하고 IP 주소 및 포트 번호에 Binding합니다. 그런 다음 소켓으로부터 데이터를 읽고 쓰면 OS 에서 네트워크 장치를 통해 데이터를 전달,수신하는 방식입니다.

 

Node.js기본적인 TCP,UDP패키지가 Built-in되어 있어 별도의 설치과정 없이 바로 사용이 가능합니다. 이제 간단한 에코 서버를 작성해 보도록 하겠습니다. 에코서버는 클라이언트에게 수신된 데이터 그대로 다시 돌려주는 서버를 말하며 예제로 많이 사용됩니다



'net' package는 TCP/IP통신을 위한 Node.js기본 내장 라이브러리입니다. net.createServer() 메서드는 TCP 서버를 생성하고 콜백 함수를 매개변수로 사용합니다. 이 콜백 함수는 새 클라이언트가 서버에 연결할 때마다 호출되어 해당 클라이언트에서 액션이 발생할때마다 콜백함수에 정의한 이벤트 리스너들이 호출됩니다.


위의 서버 코드에서 클라이언트가 연결될 때 로그를 출력후 데이터 및 종료 이벤트에 대한 이벤트 리스너를 설정합니다. data 이벤트는 클라이언트가 서버에 데이터를 보낼 때마다 발생하고 end 이벤트는 클라이언트가 연결을 끊을 때 발생합니다. 이 예제에서는 수신된 데이터를 화면에 출력후 socket.write() 메서드를 사용하여 클라이언트에 다시 전송합니다.

 

소켓을 생성 및 이벤트 리스너를 등록한 후 반드시 server.listen을 호출해야 합니다. listen함수는 서버에서 사용되며 클라이언트의 접속을 수신하라는 명령입니다. 여러 옵션을 지정할 수 있지만 클라이언트가 접속할 PORT번호는 반드시 지정되어야 합니다. 위 예제는 8080번에서 데이터 접속을 기다리고 있습니다.

 

echoserver.js파일에 위 코드를 작성후에 실행합니다.

 

C:\Users\****\myapp>node echoserver.js
Server listening on port 8080