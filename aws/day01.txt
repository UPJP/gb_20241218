1. 프리티어(free tier)

- 계정을 새로 가입하면 1년 동안 프리티어(Free Tier) 혜택을 받을 수 있다.


2. 배포(Deployment)란?

- 배포란 다른 사용자들이 인터넷을 통해서 사용할 수 있게 만드는 걸 의미한다.


3. EC2 

- Elastic(탄력있는) Compute Cloud
- 컴퓨터를 빌려서 원격으로 접속해 사용하는 서비스이다. EC2 = 하나의 컴퓨터다.


4. 리전(Region) 선택하기

- AWS EC2를 시작하기 위해서는 우선적으로 리전(Region)을 먼저 선택해야 한다.
- 인프라를 지리적으로 나누어 배포한 각각의 데이터 센터를 의미한다.
- EC2가 컴퓨터를 비려서 원격으로 접속해 사용하는 서비스인데, EC2 서비스를 제공해주는 컴퓨터들이 전 세계적으로 다양하게 분포되어 있다.
- 이렇게 컴퓨터들이 위치한 위치를 보고 AWS에서는 리전 이라고 한다.


5. 인스턴스

- AWS EC2에서 빌리는 컴퓨터 1대를 의미한다.


6. 인스턴스 유형

- 컴퓨터의 사양을 의미


7. keypair

- EC2에 접근할 수 있는 키
- 파일을 잃어버리지 말것!

8.인스턴스 상세
8-1.퍼블릭 IPv4 주소 
- EC2 인스턴스가 생성되면서 부여받는 IP주소이다. 
 EC2에 접근하려면 이 IP주소로 접근하면 된다. 
 - 퍼블릭 IPv4 DNS도 외부에서 접근가능하다.

8-2. 인스턴스 상태 
 - EC2 인스턴스를 중지, 재부팅, 종료도 할 수 있다. 
 - 재부팅은 말 그대로 컴퓨터를 재시작시키는 걸 의미 
 - 중지는 컴퓨터를 잠시 꺼놓는 것을 의미
 - 종료는 컴퓨터를 아예 삭제 시킨다는 걸 의미 
 - EC2 인스턴스를 한 번 종료하면 도중에 취소할 수 없으니 조심해야한다

9. 모니터링
 - EC2 인스턴스에 관련한 여러가지 정보를 볼 수 있는 창이다. 
   AWS를 처음 입문할 때는 자주 볼 일이없지만 나중에 실제 서버를 운영할 때는 자주 보게되는 창

10. 빌드
 - 소스코드 및 프로젝트에 쓰인 각각의 파일 및 자원 등을 JVM이나 WAS가 인식할 수 있는 구조로
   패키징 하는 과정 및 결과물
 - 빌드 도구 
 	-> Ant, Maven, Gradle 

11. 빌드 명령어 
gradlew clean bootJar

12. 실행 명령어 
cd build/libs   이동후 
 	java -jar [프로젝트 빌드 이름]
ctrl + c : 서비스 종료

13. Docker 
 - Docker는 애플리케이션을 신속하고 구축, 테스트 및 배포할 수 있는 소프트웨어 플랫폼
 - Docker란 여러 이미지들을 Doker가 보관하고 있고, 설정파일로 읽어와서 설치해주는 것 
   (해당 명령어들은 실행하기 전에 최상단 권한 root으로 이동하여 설치해야함 sudo -s)
   (해당 명령어들은 시스템을 먼저 업데이트해야 가능)
     apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common

 - GPG 키 추가 
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

 - 저장소 설치
	echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

- docker 설치 
	apt install docker-ce
- docker 설치확인 
	docker --version
13-1. 도커 설치 
 - 시스템 업데이트  
 	apt-get update

설치 시 
root@ip-172-31-37-44:/home/ubuntu# docker --version
Docker version 26.1.1, build 4cf5afa
root@ip-172-31-37-44:/home/ubuntu#
이렇게 뜸

 - 시스템 시작
	systemctl start docker   //시작
		     stop	 	//중지
		     status		//상태

 - 필요한 의존성 패키지 설치 

 - 도커 프로세스 확인 
 	docker ps 
 - 도커 컴포즈 프로세스 실행 
 	docker compose up -d(백그라운드 실행)
 	 docker exec -it springweb bin/bash

 - aws  docker mysql 접속
 	-> docker exec -it [컨테이너 이름] bin/bash
	     (docker exec -it springweb bin/bash)
 - mysql 접속
 	mysql -u root -p

 - mysql 한글채팅 
 	ALTER DATABASE springweb DEFAULT CHARACTER SET utf8 ;
 
- 특정 데이터베이스에  한글 세팅 
	#use spring web 
 	show tables 					      //테이블 보기
	alter table todo convert to character set utf8; //한글설정
	
exit
eixt
 

14. root 권한
  sudo -s  
  ls  파일 리스트 보기  ls -al 또는 ll 숨겨진 파일까지 리스트 보기

15. 파일 질라 설치 
 
16. 자바설치 
 -최신 버전으로 update 
	 apt update 

 -자바  openJDK 17버전으로 설치 
 	apt install openjdk-17-jdk

17. react 배포 
 - aws에 node 설치 
	apt install nodejs

 - npm 설치 
 	apt install npm 
 
 - gitbash로 tar로 압축
	리엑트 프로젝트 상위폴더 주소로 gitbash cd 주소 이동

	tar -czvf  [react프로젝트 이름 ].tar  [react프로젝트 이름 ]/*
 	tar -czvf reactapp.tar reactapp/*

	failzilla를 이용하여 서버에 *.tar 넘겨주고 압축을 풀어야함
   
 - 압축풀기 
	tar -xvzf  [react프로젝트 이름 ].tar  [react프로젝트 이름 ]/
 	tar -xvzf reactapp.tar reactapp/

 - react package 설치 : 프로젝트 경로 안에서 설치할 것
 	npm install

 - react 프로젝트 build : 프로젝트 경로 안에서 설치할 것
 	npm run build

 - react 서버 nginx 설치 
 	apt install nginx

  - nginx 서버 명령어
   	-> server stop
  	 systemctl stop nginx

 	  -> server start
 	  systemctl start nginx

  	 -> server restart
  	 systemctl restart nginx
	
  	 -> server status
  	 systemctl status nginx

 - 설정파일	: 3가지 수정
	vi /etc/nginx/sites-available/default

-  권한이 부여된 ubuntu가 nginx 를 실행 
	chmod 711 /home/ubuntu
	systemctl start nginx
	
 



